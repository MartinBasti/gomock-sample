// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MartinBasti/gomock-sample/makers (interfaces: SandwichMakerInterface)
//
// Generated by this command:
//
//	mockgen -destination mock_sandwich.go -package makers github.com/MartinBasti/gomock-sample/makers SandwichMakerInterface
//

// Package makers is a generated GoMock package.
package makers

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSandwichMakerInterface is a mock of SandwichMakerInterface interface.
type MockSandwichMakerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSandwichMakerInterfaceMockRecorder
}

// MockSandwichMakerInterfaceMockRecorder is the mock recorder for MockSandwichMakerInterface.
type MockSandwichMakerInterfaceMockRecorder struct {
	mock *MockSandwichMakerInterface
}

// NewMockSandwichMakerInterface creates a new mock instance.
func NewMockSandwichMakerInterface(ctrl *gomock.Controller) *MockSandwichMakerInterface {
	mock := &MockSandwichMakerInterface{ctrl: ctrl}
	mock.recorder = &MockSandwichMakerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSandwichMakerInterface) EXPECT() *MockSandwichMakerInterfaceMockRecorder {
	return m.recorder
}

// Make mocks base method.
func (m *MockSandwichMakerInterface) Make(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Make", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Make indicates an expected call of Make.
func (mr *MockSandwichMakerInterfaceMockRecorder) Make(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*MockSandwichMakerInterface)(nil).Make), arg0)
}
